// Custom Active Scan Rule for Reflected XSS
function scan(as, msg, param, value) {
    try {
        print("xss_test running for " + msg.getRequestHeader().getURI().toString());
        var xssPayloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert(1)>",
            "\"><svg/onload=alert(1)>"
        ];
        for (var i = 0; i < xssPayloads.length; i++) {
            var attack = xssPayloads[i];
            var new_msg = msg.cloneRequest();
            as.setParam(new_msg, param, attack);
            as.sendAndReceive(new_msg, false, false);
            var responseBody = "";
            try {
                responseBody = new_msg.getResponseBody().toString();
            } catch (e) {
                print("Could not get responseBody for payload: " + attack + " Error: " + e);
                responseBody = "";
            }
            print("Tested payload: " + attack + " on " + new_msg.getRequestHeader().getURI().toString());

            var coreAttack = attack.replace(/<script>/gi, "").replace(/<\/script>/gi, "");
            if (responseBody && responseBody.includes(coreAttack)) {
                as.raiseAlert(
                    3,
                    2,
                    "Reflected XSS",
                    "Potential XSS with payload: " + attack,
                    new_msg.getRequestHeader().getURI().toString(),
                    param,
                    attack,
                    responseBody,
                    "",
                    "",
                    new_msg
                );
                print("Reflected XSS alert raised for payload: " + attack);
            }
        }
    } catch (err) {
        print("Active scan script error: " + err);
    }
}